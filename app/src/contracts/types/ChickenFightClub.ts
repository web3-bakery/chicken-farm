/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ChickenFightClubInterface extends utils.Interface {
  functions: {
    "ENTRY_FEE()": FunctionFragment;
    "REGISTRATION_DURATION()": FunctionFragment;
    "ROUND_DURATION()": FunctionFragment;
    "calculateRound(uint256)": FunctionFragment;
    "chickenNFT()": FunctionFragment;
    "chickens(uint256)": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "isChickenInTournament(uint256)": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "registerChicken(uint256)": FunctionFragment;
    "registeredChickenCount()": FunctionFragment;
    "tournamentStartTimestamp()": FunctionFragment;
    "withdrawReward()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ENTRY_FEE"
      | "REGISTRATION_DURATION"
      | "ROUND_DURATION"
      | "calculateRound"
      | "chickenNFT"
      | "chickens"
      | "currentPhase"
      | "isChickenInTournament"
      | "pendingRewards"
      | "registerChicken"
      | "registeredChickenCount"
      | "tournamentStartTimestamp"
      | "withdrawReward"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ENTRY_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REGISTRATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUND_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chickenNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chickens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isChickenInTournament",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerChicken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredChickenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tournamentStartTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ENTRY_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUND_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chickenNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chickens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChickenInTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChicken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredChickenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tournamentStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "ChickenRegistered(address,uint256)": EventFragment;
    "RoundConcluded(uint8,uint8)": EventFragment;
    "TournamentWinnerDeclared(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChickenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundConcluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TournamentWinnerDeclared"): EventFragment;
}

export interface ChickenRegisteredEventObject {
  user: string;
  tokenId: BigNumber;
}
export type ChickenRegisteredEvent = TypedEvent<
  [string, BigNumber],
  ChickenRegisteredEventObject
>;

export type ChickenRegisteredEventFilter =
  TypedEventFilter<ChickenRegisteredEvent>;

export interface RoundConcludedEventObject {
  currentRound: number;
  nextRound: number;
}
export type RoundConcludedEvent = TypedEvent<
  [number, number],
  RoundConcludedEventObject
>;

export type RoundConcludedEventFilter = TypedEventFilter<RoundConcludedEvent>;

export interface TournamentWinnerDeclaredEventObject {
  winner: string;
}
export type TournamentWinnerDeclaredEvent = TypedEvent<
  [string],
  TournamentWinnerDeclaredEventObject
>;

export type TournamentWinnerDeclaredEventFilter =
  TypedEventFilter<TournamentWinnerDeclaredEvent>;

export interface ChickenFightClub extends BaseContract {
  contractName: "ChickenFightClub";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChickenFightClubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ENTRY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    REGISTRATION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROUND_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRound(
      favoredChickenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chickenNFT(overrides?: CallOverrides): Promise<[string]>;

    chickens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        owner: string;
        tokenId: BigNumber;
        hasFreeWin: boolean;
      }
    >;

    currentPhase(overrides?: CallOverrides): Promise<[number]>;

    isChickenInTournament(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerChicken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredChickenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tournamentStartTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ENTRY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  ROUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRound(
    favoredChickenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chickenNFT(overrides?: CallOverrides): Promise<string>;

  chickens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      owner: string;
      tokenId: BigNumber;
      hasFreeWin: boolean;
    }
  >;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  isChickenInTournament(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerChicken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredChickenCount(overrides?: CallOverrides): Promise<BigNumber>;

  tournamentStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ENTRY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRound(
      favoredChickenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chickenNFT(overrides?: CallOverrides): Promise<string>;

    chickens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        owner: string;
        tokenId: BigNumber;
        hasFreeWin: boolean;
      }
    >;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    isChickenInTournament(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerChicken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredChickenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tournamentStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChickenRegistered(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ChickenRegisteredEventFilter;
    ChickenRegistered(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ChickenRegisteredEventFilter;

    "RoundConcluded(uint8,uint8)"(
      currentRound?: null,
      nextRound?: null
    ): RoundConcludedEventFilter;
    RoundConcluded(
      currentRound?: null,
      nextRound?: null
    ): RoundConcludedEventFilter;

    "TournamentWinnerDeclared(address)"(
      winner?: null
    ): TournamentWinnerDeclaredEventFilter;
    TournamentWinnerDeclared(
      winner?: null
    ): TournamentWinnerDeclaredEventFilter;
  };

  estimateGas: {
    ENTRY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRound(
      favoredChickenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chickenNFT(overrides?: CallOverrides): Promise<BigNumber>;

    chickens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    isChickenInTournament(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerChicken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredChickenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tournamentStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ENTRY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REGISTRATION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROUND_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRound(
      favoredChickenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chickenNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chickens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isChickenInTournament(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerChicken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredChickenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tournamentStartTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
