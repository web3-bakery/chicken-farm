/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface QuestsInterface extends utils.Interface {
  functions: {
    "canSolveQuest(uint256)": FunctionFragment;
    "completeQuest(uint256)": FunctionFragment;
    "createQuest(string,uint256,address,uint256)": FunctionFragment;
    "deleteQuest(uint256)": FunctionFragment;
    "nextQuestId()": FunctionFragment;
    "quests(uint256)": FunctionFragment;
    "updateQuest(uint256,string,uint256,address,uint256,bool)": FunctionFragment;
    "userPoints(address)": FunctionFragment;
    "userQuestCompletion(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canSolveQuest"
      | "completeQuest"
      | "createQuest"
      | "deleteQuest"
      | "nextQuestId"
      | "quests"
      | "updateQuest"
      | "userPoints"
      | "userQuestCompletion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canSolveQuest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeQuest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createQuest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteQuest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextQuestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userQuestCompletion",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "canSolveQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQuestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userQuestCompletion",
    data: BytesLike
  ): Result;

  events: {
    "QuestCompleted(uint256,address)": EventFragment;
    "QuestCreated(uint256,string,uint256,address,uint256)": EventFragment;
    "QuestDeleted(uint256)": EventFragment;
    "QuestUpdated(uint256,string,uint256,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "QuestCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestUpdated"): EventFragment;
}

export interface QuestCompletedEventObject {
  questId: BigNumber;
  user: string;
}
export type QuestCompletedEvent = TypedEvent<
  [BigNumber, string],
  QuestCompletedEventObject
>;

export type QuestCompletedEventFilter = TypedEventFilter<QuestCompletedEvent>;

export interface QuestCreatedEventObject {
  questId: BigNumber;
  description: string;
  points: BigNumber;
  requiredTokenAddress: string;
  requiredTokenAmount: BigNumber;
}
export type QuestCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  QuestCreatedEventObject
>;

export type QuestCreatedEventFilter = TypedEventFilter<QuestCreatedEvent>;

export interface QuestDeletedEventObject {
  questId: BigNumber;
}
export type QuestDeletedEvent = TypedEvent<
  [BigNumber],
  QuestDeletedEventObject
>;

export type QuestDeletedEventFilter = TypedEventFilter<QuestDeletedEvent>;

export interface QuestUpdatedEventObject {
  questId: BigNumber;
  description: string;
  points: BigNumber;
  requiredTokenAddress: string;
  requiredTokenAmount: BigNumber;
  active: boolean;
}
export type QuestUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, boolean],
  QuestUpdatedEventObject
>;

export type QuestUpdatedEventFilter = TypedEventFilter<QuestUpdatedEvent>;

export interface Quests extends BaseContract {
  contractName: "Quests";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canSolveQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    completeQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createQuest(
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextQuestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    quests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        id: BigNumber;
        description: string;
        points: BigNumber;
        requiredTokenAddress: string;
        requiredTokenAmount: BigNumber;
        active: boolean;
      }
    >;

    updateQuest(
      questId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userQuestCompletion(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  canSolveQuest(
    questId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  completeQuest(
    questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createQuest(
    description: PromiseOrValue<string>,
    points: PromiseOrValue<BigNumberish>,
    requiredTokenAddress: PromiseOrValue<string>,
    requiredTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteQuest(
    questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextQuestId(overrides?: CallOverrides): Promise<BigNumber>;

  quests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
      id: BigNumber;
      description: string;
      points: BigNumber;
      requiredTokenAddress: string;
      requiredTokenAmount: BigNumber;
      active: boolean;
    }
  >;

  updateQuest(
    questId: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    points: PromiseOrValue<BigNumberish>,
    requiredTokenAddress: PromiseOrValue<string>,
    requiredTokenAmount: PromiseOrValue<BigNumberish>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userQuestCompletion(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    canSolveQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    completeQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createQuest(
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextQuestId(overrides?: CallOverrides): Promise<BigNumber>;

    quests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        id: BigNumber;
        description: string;
        points: BigNumber;
        requiredTokenAddress: string;
        requiredTokenAmount: BigNumber;
        active: boolean;
      }
    >;

    updateQuest(
      questId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    userPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userQuestCompletion(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "QuestCompleted(uint256,address)"(
      questId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): QuestCompletedEventFilter;
    QuestCompleted(
      questId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): QuestCompletedEventFilter;

    "QuestCreated(uint256,string,uint256,address,uint256)"(
      questId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      points?: null,
      requiredTokenAddress?: null,
      requiredTokenAmount?: null
    ): QuestCreatedEventFilter;
    QuestCreated(
      questId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      points?: null,
      requiredTokenAddress?: null,
      requiredTokenAmount?: null
    ): QuestCreatedEventFilter;

    "QuestDeleted(uint256)"(
      questId?: PromiseOrValue<BigNumberish> | null
    ): QuestDeletedEventFilter;
    QuestDeleted(
      questId?: PromiseOrValue<BigNumberish> | null
    ): QuestDeletedEventFilter;

    "QuestUpdated(uint256,string,uint256,address,uint256,bool)"(
      questId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      points?: null,
      requiredTokenAddress?: null,
      requiredTokenAmount?: null,
      active?: null
    ): QuestUpdatedEventFilter;
    QuestUpdated(
      questId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      points?: null,
      requiredTokenAddress?: null,
      requiredTokenAmount?: null,
      active?: null
    ): QuestUpdatedEventFilter;
  };

  estimateGas: {
    canSolveQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createQuest(
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextQuestId(overrides?: CallOverrides): Promise<BigNumber>;

    quests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateQuest(
      questId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userQuestCompletion(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canSolveQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createQuest(
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteQuest(
      questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextQuestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateQuest(
      questId: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      requiredTokenAddress: PromiseOrValue<string>,
      requiredTokenAmount: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userQuestCompletion(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
